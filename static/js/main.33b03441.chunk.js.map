{"version":3,"sources":["game.ts","utils.ts","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Directions","randomInt","min","max","Math","floor","random","throttle","time","fn","lastExecuted","timeStamp","Date","now","head","xs","last","length","roundRect","ctx","x","y","width","height","radius","fill","stroke","tl","tr","br","bl","defaultRadius","Object","keys","reduce","acc","side","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","OppositeDirections","up","down","right","left","hasCollidedWith","a","b","safeIndex","sizes","board","pixel","moveBlock","direction","block","patches","isCorner","makeRandomFruit","pixels","fruits","value","utils","randomFruit","snake","fruit","some","LS_KEY","PIXELS","BOARD_SIZE","FRUITS","SNAKE","INITIAL_STATE","moves","game","isPlaying","isGameOver","score","bestScore","JSON","parse","localStorage","getItem","animationFrameId","App","props","state","handleKeyUp","code","isPaused","togglePlay","move","keyCode","setDirection","handleJoyStickClick","e","preventDefault","drawPixel","i","isHead","isLast","PIXEL_SIZE","fillRect","draw","clear","forEach","fillStyle","font","fillText","play","window","requestAnimationFrame","setState","clearRect","reset","stop","cancelAnimationFrame","start","shift","unshift","pop","tail","isCollision","push","setItem","stringify","document","addEventListener","getElementById","getContext","this","removeEventListener","className","style","renderOverlay","onClick","id","renderControls","src","alt","directions","hasBeatenBestScore","cn","background","map","key","disabled","concat","React","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","URL","process","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.33b03441.chunk.js","sourcesContent":["import * as utils from \"./utils\";\n\nexport interface IPosition {\n  x: number;\n  y: number;\n}\n\nexport enum Directions {\n  up = \"up\",\n  right = \"right\",\n  left = \"left\",\n  down = \"down\"\n}\n\nexport const OppositeDirections = {\n  up: Directions.down,\n  right: Directions.left,\n  left: Directions.right,\n  down: Directions.up\n};\n\nexport type Direction = keyof typeof Directions;\n\nexport type Block = IPosition & {\n  direction: Direction;\n  isCorner: boolean;\n  radius:\n    | number\n    | {\n        tl: number;\n        tr: number;\n        bl: number;\n        br: number;\n      };\n};\n\nexport type Fruit = IPosition & { value: string };\n\nexport const hasCollidedWith = (a: IPosition) => (b: IPosition) =>\n  a.x === b.x && a.y === b.y;\n\nexport function safeIndex(x: number, sizes: { board: number; pixel: number }) {\n  if (x < 0) {\n    return sizes.board / sizes.pixel - 1;\n  }\n  return x * sizes.pixel >= sizes.board ? 0 : x;\n}\n\nexport function moveBlock(\n  direction: Direction,\n  block: Block,\n  sizes: { board: number; pixel: number }\n): Block {\n  const { up, down, right, left } = Directions;\n  const patches = {\n    [up]: { y: safeIndex(block.y - 1, sizes) },\n    [down]: { y: safeIndex(block.y + 1, sizes) },\n    [right]: { x: safeIndex(block.x + 1, sizes) },\n    [left]: { x: safeIndex(block.x - 1, sizes) }\n  };\n\n  if (block.direction !== direction) {\n    block.isCorner = true;\n    block.radius = {\n      tl:\n        (direction === right && block.direction === up) ||\n        (direction === down && block.direction === left)\n          ? sizes.pixel / 2\n          : 0,\n      tr:\n        (direction === down && block.direction === right) ||\n        (direction === left && block.direction === up)\n          ? sizes.pixel / 2\n          : 0,\n      br:\n        (direction === left && block.direction === down) ||\n        (direction === up && block.direction === right)\n          ? sizes.pixel / 2\n          : 0,\n      bl:\n        (direction === up && block.direction === left) ||\n        (direction === right && block.direction === down)\n          ? sizes.pixel / 2\n          : 0\n    };\n  }\n\n  return {\n    ...block,\n    ...patches[direction],\n    isCorner: false,\n    radius: 0\n  };\n}\n\nexport const makeRandomFruit = (pixels: number, fruits: string[]) => ({\n  value: fruits[utils.randomInt(0, fruits.length - 1)],\n  y: utils.randomInt(1, pixels),\n  x: utils.randomInt(1, pixels)\n});\n\nexport const randomFruit = (\n  snake: Block[],\n  pixels: number,\n  fruits: string[]\n): Fruit => {\n  let fruit = makeRandomFruit(pixels, fruits);\n\n  while (snake.some(hasCollidedWith(fruit))) {\n    fruit = makeRandomFruit(pixels, fruits);\n  }\n\n  return fruit;\n};\n\nexport function decodeDirectionKey(keyCode: string) {\n  switch (keyCode) {\n    case \"KeyW\":\n    case \"ArrowUp\":\n      return Directions.up;\n    case \"KeyS\":\n    case \"ArrowDown\":\n      return Directions.down;\n    case \"KeyA\":\n    case \"ArrowLeft\":\n      return Directions.left;\n    case \"KeyD\":\n    case \"ArrowRight\":\n      return Directions.right;\n    default:\n      return null;\n  }\n}\n","export const randomInt = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const timeElapsed = (timeStamp: number) => Date.now() - timeStamp;\n\nexport const throttle = (time: number, fn: () => void) => {\n  let lastExecuted: number = 0;\n\n  return () => {\n    if (timeElapsed(lastExecuted) < time) {\n      return;\n    }\n    fn();\n    lastExecuted = Date.now();\n  };\n};\n\nexport const head = <T>(xs: T[]): T => xs[0];\n\nexport const last = <T>(xs: T[]): T => xs[xs.length - 1];\n\nexport function roundRect(\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number | { tl: number; tr: number; br: number; bl: number },\n  fill: boolean,\n  stroke: boolean = true\n) {\n  if (typeof stroke === \"undefined\") {\n    stroke = true;\n  }\n  if (typeof radius === \"undefined\") {\n    radius = 5;\n  }\n  if (typeof radius === \"number\") {\n    radius = { tl: radius, tr: radius, br: radius, bl: radius };\n  } else {\n    const defaultRadius = { tl: 0, tr: 0, br: 0, bl: 0 };\n\n    radius = Object.keys(defaultRadius).reduce(\n      (acc, side) => ({ ...acc, [side]: acc[side] || defaultRadius[side] }),\n      radius\n    );\n  }\n  ctx.beginPath();\n  ctx.moveTo(x + radius.tl, y);\n  ctx.lineTo(x + width - radius.tr, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);\n  ctx.lineTo(x + width, y + height - radius.br);\n  ctx.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius.br,\n    y + height\n  );\n  ctx.lineTo(x + radius.bl, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);\n  ctx.lineTo(x, y + radius.tl);\n  ctx.quadraticCurveTo(x, y, x + radius.tl, y);\n  ctx.closePath();\n  if (fill) {\n    ctx.fill();\n  }\n  if (stroke) {\n    ctx.stroke();\n  }\n}\n","import cn from \"classnames\";\nimport * as React from \"react\";\n\nimport \"./App.css\";\n\nimport * as game from \"./game\";\nimport * as utils from \"./utils\";\n\ninterface IState {\n  snake: game.Block[];\n  moves: game.Direction[];\n  fruit: game.Fruit;\n  isPlaying: boolean;\n  isGameOver: boolean;\n  score: number;\n  bestScore: number;\n}\n\n// config\nconst LS_KEY = \"react-snake-best-score\";\nconst BOARD_SIZE = 330;\nconst PIXEL_SIZE = BOARD_SIZE / 30;\nconst PIXEL_RADIUS = PIXEL_SIZE / 2;\nconst PIXELS = Math.floor(BOARD_SIZE / PIXEL_SIZE) - 2;\nconst FRUITS = [\"🍑\", \"🍎\", \"🍏\", \"🍐\", \"🍓\", \"🥝\"];\n\nconst SNAKE_SPEED = 500; // speed in ms\nconst OPTIMAL_FRAME_RATE = (1 / 60) * 1000; // 60fps\n\n// initial state\nconst SNAKE: game.Block[] = [\n  { x: 5, y: 1, direction: \"right\", isCorner: false, radius: 0 },\n  { x: 4, y: 1, direction: \"right\", isCorner: false, radius: 0 },\n  { x: 3, y: 1, direction: \"right\", isCorner: false, radius: 0 },\n];\n\nconst INITIAL_STATE: IState = {\n  snake: SNAKE,\n  moves: [game.Directions.right],\n  fruit: game.randomFruit(SNAKE, PIXELS, FRUITS),\n  isPlaying: false,\n  isGameOver: false,\n  score: 0,\n  bestScore: JSON.parse(localStorage.getItem(LS_KEY) || \"0\"),\n};\n\nlet animationFrameId = 0;\n\nexport default class App extends React.Component<{}, IState> {\n  public state: IState = INITIAL_STATE;\n\n  get ctx() {\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\n    return canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  }\n\n  get isPaused() {\n    return !this.state.isPlaying && !this.state.isGameOver;\n  }\n\n  constructor(props: {}) {\n    super(props);\n\n    this.move = utils.throttle(SNAKE_SPEED, this.move);\n    this.draw = utils.throttle(OPTIMAL_FRAME_RATE, this.draw);\n\n    document.addEventListener(\"keyup\", this.handleKeyUp);\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\n    this.stop();\n  }\n\n  public componentDidMount() {\n    this.draw();\n  }\n\n  public render() {\n    return (\n      <div className=\"game\">\n        <div\n          className=\"canvas-container\"\n          style={{ width: BOARD_SIZE, height: BOARD_SIZE }}\n        >\n          {this.renderOverlay()}\n\n          <div onClick={this.togglePlay}>\n            <canvas id=\"canvas\" width={BOARD_SIZE} height={BOARD_SIZE} />\n          </div>\n          <div className=\"under-canvas\">Jude SNAKE 1987</div>\n\n          {this.renderControls()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderOverlay() {\n    if (!this.state.isGameOver && this.state.isPlaying) {\n      return null;\n    }\n\n    return (\n      <div>\n        <div className=\"canvas-overlay\" />\n        <div className=\"overlay-message\">\n          {!this.state.isGameOver && (\n            <img\n              src=\"mstile-150x150.png\"\n              alt=\"snake logo\"\n              className=\"snake-img\"\n            />\n          )}\n          <div>{this.state.isGameOver ? \"GAME OVER\" : \"REACT SNAKE\"}</div>\n          <div>\n            {this.state.isGameOver ? (\n              <button className=\"overlay-button\" onClick={this.reset}>\n                NEW GAME\n              </button>\n            ) : (\n              <button className=\"overlay-button\" onClick={this.start}>\n                {animationFrameId ? \"RESUME\" : \"START\"}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderControls() {\n    const directions = Object.keys(game.Directions) as game.Direction[];\n    const hasBeatenBestScore = this.state.score >= this.state.bestScore;\n\n    return (\n      <div className=\"controls\">\n        <div>\n          <div\n            className={cn(\"score\", {\n              \"score--best\": hasBeatenBestScore,\n            })}\n            style={{ background: this.state.isPlaying ? \"#2EC4B6\" : \"#accac7\" }}\n          >\n            {this.state.score}\n          </div>\n          <div\n            className={cn(\"best-score\", {\n              \"best-score--beaten\": hasBeatenBestScore,\n            })}\n          >\n            <span className=\"best-score-label\">best: </span>\n            <span>{this.state.bestScore}</span>\n          </div>\n        </div>\n        <div className=\"directional-container\">\n          {directions.map((direction) => (\n            <button\n              key={direction}\n              className={`control ${direction}`}\n              disabled={!this.state.isPlaying}\n              onClick={this.handleJoyStickClick(direction)}\n            >\n              <div className=\"control-text\">↑</div>\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  private setDirection(direction: game.Direction) {\n    const move =\n      utils.last(this.state.moves) || utils.head(this.state.snake).direction;\n\n    const isIllegalMove =\n      move === direction || move === game.OppositeDirections[direction];\n\n    if (isIllegalMove) {\n      return;\n    }\n\n    this.setState(\n      (state) => ({ moves: state.moves.concat(direction) }),\n      this.move\n    );\n  }\n\n  private handleKeyUp = ({ code }: KeyboardEvent) => {\n    if (code === \"Space\" && this.state.isPlaying) {\n      if (!this.isPaused) {\n        this.togglePlay();\n      }\n    } else {\n      const move = game.decodeDirectionKey(code);\n\n      if (move) {\n        this.setDirection(move);\n      }\n    }\n  };\n\n  private handleJoyStickClick = (direction: game.Direction) => (\n    e: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    e.preventDefault();\n    this.setDirection(direction);\n  };\n\n  private drawPixel = (block: game.Block, i: number, snake: game.Block[]) => {\n    const { direction } = block;\n    const { up, down, left, right } = game.Directions;\n\n    const isHead = i === 0;\n    const isLast = i === snake.length - 1;\n\n    if (isHead) {\n      return utils.roundRect(\n        this.ctx,\n        block.x * PIXEL_SIZE,\n        block.y * PIXEL_SIZE,\n        PIXEL_SIZE,\n        PIXEL_SIZE,\n        {\n          tl: direction === up || direction === left ? PIXEL_RADIUS : 0,\n          tr: direction === up || direction === right ? PIXEL_RADIUS : 0,\n          bl: direction === down || direction === left ? PIXEL_RADIUS : 0,\n          br: direction === down || direction === right ? PIXEL_RADIUS : 0,\n        },\n        true,\n        false\n      );\n    }\n\n    if (block.isCorner && typeof block.radius === \"object\") {\n      return utils.roundRect(\n        this.ctx,\n        block.x * PIXEL_SIZE,\n        block.y * PIXEL_SIZE,\n        PIXEL_SIZE,\n        PIXEL_SIZE,\n        block.radius,\n        true,\n        false\n      );\n    }\n\n    if (isLast) {\n      return utils.roundRect(\n        this.ctx,\n        block.x * PIXEL_SIZE,\n        block.y * PIXEL_SIZE,\n        PIXEL_SIZE,\n        PIXEL_SIZE,\n        {\n          tl: direction === down || direction === right ? PIXEL_RADIUS : 0,\n          tr: direction === down || direction === left ? PIXEL_RADIUS : 0,\n          bl: direction === up || direction === right ? PIXEL_RADIUS : 0,\n          br: direction === up || direction === left ? PIXEL_RADIUS : 0,\n        },\n        true,\n        false\n      );\n    }\n\n    this.ctx.fillRect(\n      block.x * PIXEL_SIZE,\n      block.y * PIXEL_SIZE,\n      PIXEL_SIZE,\n      PIXEL_SIZE\n    );\n  };\n\n  private draw = () => {\n    this.clear();\n\n    this.state.snake.forEach((block, i) => {\n      const isHead = !i;\n\n      this.ctx.fillStyle = isHead ? \"#011627\" : i % 2 ? \"#E71D36\" : \"#FF9F1C\";\n      this.drawPixel(block, i, this.state.snake);\n    });\n\n    this.ctx.font = `${PIXEL_SIZE * 1.4}px Segoe UI Emoji`;\n    this.ctx.fillText(\n      this.state.fruit.value,\n      this.state.fruit.x * PIXEL_SIZE - 6,\n      this.state.fruit.y * PIXEL_SIZE + 12\n    );\n  };\n\n  private play = () => {\n    if (this.state.isPlaying && !this.state.isGameOver) {\n      this.move();\n      this.draw();\n    }\n\n    animationFrameId = window.requestAnimationFrame(this.play);\n  };\n\n  private togglePlay = () => {\n    if (this.state.isGameOver || !animationFrameId) {\n      return;\n    }\n\n    this.setState({\n      isPlaying: !this.state.isPlaying,\n    });\n  };\n\n  private clear = () => this.ctx.clearRect(0, 0, BOARD_SIZE, BOARD_SIZE);\n\n  private reset = () => {\n    this.setState(\n      {\n        ...INITIAL_STATE,\n        bestScore: JSON.parse(localStorage.getItem(LS_KEY) || \"0\"),\n      },\n      this.draw\n    );\n  };\n\n  private stop = () => {\n    window.cancelAnimationFrame(animationFrameId);\n\n    animationFrameId = 0;\n  };\n\n  private start = () => {\n    if (animationFrameId) {\n      this.stop();\n    }\n\n    this.setState({ isPlaying: true }, this.play);\n  };\n\n  private move = () => {\n    this.setState((state) => {\n      // move snake\n\n      const move = state.moves.shift();\n      const snake = [...state.snake];\n      const direction = move || utils.head(state.snake).direction;\n\n      snake.unshift({\n        ...game.moveBlock(direction, utils.head(state.snake), {\n          board: BOARD_SIZE,\n          pixel: PIXEL_SIZE,\n        }),\n        direction,\n      });\n      snake.pop();\n\n      const [head, ...tail] = snake;\n      const isCollision = game.hasCollidedWith(head);\n\n      // collided with self\n      if (tail.some(isCollision)) {\n        this.stop();\n\n        return { ...state, snake, move, isPlaying: false, isGameOver: true };\n      }\n\n      // collided with fruit\n      if (isCollision(state.fruit)) {\n        // add new block to snake's end\n        const last = utils.last(snake);\n        snake.push(\n          game.moveBlock(game.OppositeDirections[last.direction], last, {\n            board: BOARD_SIZE,\n            pixel: PIXEL_SIZE,\n          })\n        );\n\n        // increment score\n        const score = state.score + 1;\n        const bestScore = score > state.bestScore ? score : state.bestScore;\n\n        // persist best score to localstorage\n        if (score >= bestScore) {\n          localStorage.setItem(LS_KEY, JSON.stringify(score));\n        }\n\n        return {\n          ...state,\n          snake,\n          move,\n          score,\n          bestScore,\n          fruit: game.randomFruit(snake, PIXELS, FRUITS),\n        };\n      }\n\n      // just moved\n      return { ...state, snake, move };\n    });\n  };\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}